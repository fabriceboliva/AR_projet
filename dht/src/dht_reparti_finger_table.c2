#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>

#define NB_SITES	10
#define M			6	// cle encodee sur M bits, doit etre inferieur Ã  NB_SITES
#define I			((int) pow(2, M))
#define K			((int) pow(2, M))

#define TAGINIT		0
#define TAGEND		1

#define TAGSEARCH	2
#define TAGFOUND	3
#define TAGRES		4


///////////////////////////////////////////////////////////////////////////////////////////
//										SIGNATURES
///////////////////////////////////////////////////////////////////////////////////////////

// chord functions
void simulator();
void dht_node(int mpi_id);


// helper functions

static void print_initial_data(int *chord_ids, int finger_tables[NB_SITES][2][M]);
static void quickSort(int *intArray, int left, int right);


///////////////////////////////////////////////////////////////////////////////////////////
//										PROGRAM
///////////////////////////////////////////////////////////////////////////////////////////

int main (int argc, char* argv[]) 
{
	int nb_proc, mpi_id;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nb_proc);

	if(nb_proc != NB_SITES+1) {
		printf("Error in number of process !\n");
		MPI_Finalize();
		exit(2);
	}

	MPI_Comm_rank(MPI_COMM_WORLD, &mpi_id);

	if(mpi_id == 0)
		simulator();
	else
		dht_node(mpi_id);

	MPI_Finalize();
	return 0;
}


///////////////////////////////////////////////////////////////////////////////////////////
//										SIMULATOR
///////////////////////////////////////////////////////////////////////////////////////////


static inline int contains(int value, int *table, int length) {
	int i;
	for(i = 0; i < length; i++)
		if(table[i] == value)
			return i;
	return -1;
}

static int new_chord_id(int *table, int length) {
	int id;
	do {
		id = rand() % I;
	} while(contains(id, table, length) != -1);
	return id;
}



static inline int find_position(int value, int *table, int length) {
	int i, position = -1;
	for(i = 0; i < length; i++)
		if(table[i] == value)
			position = i;
	return position;
}

static inline int find_next_node(int value, int *chord_ids, int length) {
	int i;
	for(i = 0; i < length; i++)
		if(chord_ids[i] >= value)
			return i;
	return -1;
}

static void calculate_finger_table(int *chord_ids, int finger_tables[NB_SITES][2][M], int chord_id_position) {
	int value, mpi_id, j;
	for(j = 0; j < M; j++) {
		value = (chord_ids[chord_id_position] + ((int) pow(2, j))) % ((int) pow(2, M));
		mpi_id = find_next_node(value, chord_ids, NB_SITES);
		if(mpi_id == -1) {
			finger_tables[chord_id_position][0][j] = chord_ids[0];
			finger_tables[chord_id_position][1][j] = 1; // car rang MPI
		} else {
			finger_tables[chord_id_position][0][j] = chord_ids[mpi_id];
			finger_tables[chord_id_position][1][j] = mpi_id + 1; // car rang MPI
		}
	}
}


void simulator() 
{
	int i, mpi_id, temp;
	int search_chord_id, search_data_key;
	MPI_Status status;
	int chord_id_responsible;

	printf("\nDHT Centralise\n");

	// data
	int chord_ids[NB_SITES];// the index + 1 is the mpi rank and the value is chord id
	int finger_tables[NB_SITES][2][M]; // premiere colonne id chord, deuxieme colonne id MPI
	
	srand(time(NULL));

	// generationg ids
	for(i = 0; i < NB_SITES; i++)
		chord_ids[i] = new_chord_id(chord_ids, i);

	// sorting ids to have the same ordrer as mpi ranks, to make easier the development
	quickSort(chord_ids, 0, NB_SITES-1);

	// calculation of finger tables
	for(i = 0; i < NB_SITES; i++) {
		calculate_finger_table(chord_ids, finger_tables, i);
	}

	// display of generated data
	print_initial_data(chord_ids, finger_tables);

	for(i = 0; i < NB_SITES; i++){
		mpi_id = i + 1;

		// printf("[SIMULATOR] send to %d, chord_ids: %d\n", mpi_id, chord_ids[i]);
		MPI_Send(&chord_ids[i], 1, MPI_INT, mpi_id, TAGINIT, MPI_COMM_WORLD);

		temp = M;
		// printf("[SIMULATOR] send to %d, succ_id_chord: %d\n", mpi_id, chord_succ[i]);
		MPI_Send(&temp, 1, MPI_INT, mpi_id, TAGINIT, MPI_COMM_WORLD);

		MPI_Send(&finger_tables[i][0], M, MPI_INT, mpi_id, TAGINIT, MPI_COMM_WORLD);
		MPI_Send(&finger_tables[i][1], M, MPI_INT, mpi_id, TAGINIT, MPI_COMM_WORLD);
	}

	// search

	// generating random id while it exists and a data key
	do {
		search_chord_id = rand() % I + 1;
	} while(contains(search_chord_id, chord_ids, NB_SITES) == -1);

	search_data_key = rand() % I + 1;
	mpi_id = find_position(search_chord_id, chord_ids, NB_SITES) + 1;

	printf("[SIMULATOR] start search: key:%d peer:%d\n", search_data_key, chord_ids[mpi_id - 1]);
	MPI_Send(&search_data_key, 1, MPI_INT, mpi_id, TAGSEARCH, MPI_COMM_WORLD);

	MPI_Recv(&chord_id_responsible, 1, MPI_INT, MPI_ANY_SOURCE, TAGRES, MPI_COMM_WORLD, &status);
	printf("[SIMULATOR] end search: key:%d peer_id:%d\n", search_data_key, chord_id_responsible);

	// sending end message
	for(i = 0; i < NB_SITES; i++){
		mpi_id = i + 1;
		MPI_Send(NULL, 0, MPI_INT, mpi_id, TAGEND, MPI_COMM_WORLD);
	}
}


///////////////////////////////////////////////////////////////////////////////////////////
//											PEERS
///////////////////////////////////////////////////////////////////////////////////////////

/* 
 * Helper function used to receive intial state values from the simulator	
 */
void receive_params(int *chord_id, int **finger_table_chord_ids, int **finger_table_mpi_ids, int *length) 
{
	MPI_Status status;

	MPI_Recv(chord_id, 1, MPI_INT, 0, TAGINIT, MPI_COMM_WORLD, &status);
	
	MPI_Recv(length, 1, MPI_INT, 0, TAGINIT, MPI_COMM_WORLD, &status);

	*finger_table_chord_ids = (int *) malloc((*length) * sizeof(int));
	if(finger_table_chord_ids == NULL)
		goto err;

	*finger_table_mpi_ids = (int *) malloc((*length) * sizeof(int));
	if(finger_table_mpi_ids == NULL)
		goto err1;

	MPI_Recv(*finger_table_chord_ids, (*length), MPI_INT, 0, TAGINIT, MPI_COMM_WORLD, &status);
	MPI_Recv(*finger_table_mpi_ids, (*length), MPI_INT, 0, TAGINIT, MPI_COMM_WORLD, &status);

	return;

err1:
	free(finger_table_chord_ids);
	
err:
	exit(-1);
}


/*
 * Function that search the peer indharge of the key
 * in the finger table given as parameter
 */
static int lookup(int search_data_key, int chord_id, int *finger_table_chord_ids, int length) 
{
	int i;
	if(chord_id == search_data_key)
		return length;

	for(i = length - 1; i >= 0; i--) {
		if(chord_id < finger_table_chord_ids[i]) {
			if(((search_data_key < chord_id) || (finger_table_chord_ids[i] <= search_data_key)))
				break;
		} else {
			if(((finger_table_chord_ids[i] < search_data_key) && (search_data_key <= chord_id)))
				break;
		}
	}
	return i;
}


/*
 * Function representing the peers
 */
void dht_node(int mpi_id) 
{
	int chord_id, *finger_table_chord_ids, *finger_table_mpi_ids, length;
	int search_data_key;
	int found, end;
	MPI_Status status;

	// receiving parameters
	receive_params(&chord_id, &finger_table_chord_ids, &finger_table_mpi_ids, &length);

	// processing entering messages
	end = 0;
	while(!end) {
		MPI_Probe(MPI_ANY_SOURCE, MPI_ANY_TAG, MPI_COMM_WORLD, &status);
		switch(status.MPI_TAG) {
		case TAGSEARCH:
			MPI_Recv(&search_data_key, 1, MPI_INT, MPI_ANY_SOURCE, TAGSEARCH, MPI_COMM_WORLD, &status);
			printf("\t[CHORD] peer %d: received search request of key %d\n", chord_id, search_data_key);
			found = lookup(search_data_key, chord_id, finger_table_chord_ids, length);
			if(found == -1) {
				//send to the successor
				printf("\t[CHORD] peer %d: forward key to successor %d\n", chord_id, finger_table_chord_ids[0]);
				MPI_Send(&search_data_key, 1, MPI_INT, finger_table_mpi_ids[0], TAGFOUND, MPI_COMM_WORLD);
			} else if (found == length) {
				// send to me
				printf("\t[CHORD] peer %d: forward key to me %d\n", chord_id, chord_id);
				MPI_Send(&search_data_key, 1, MPI_INT, mpi_id, TAGFOUND, MPI_COMM_WORLD);
			} else {
				// send to greatest peer that is inferior to the key
				printf("\t[CHORD] peer %d: forward key to %d\n", chord_id, finger_table_chord_ids[found]);
				MPI_Send(&search_data_key, 1, MPI_INT, finger_table_mpi_ids[found], TAGSEARCH, MPI_COMM_WORLD);
			}
			break;
		case TAGFOUND:
			MPI_Recv(&search_data_key, 1, MPI_INT, MPI_ANY_SOURCE, TAGFOUND, MPI_COMM_WORLD, &status);
			printf("\t[CHORD] peer %d: found key %d\n", chord_id, search_data_key);
			MPI_Send(&chord_id, 1, MPI_INT, 0, TAGRES, MPI_COMM_WORLD);
			break;
		case TAGEND:
			MPI_Recv(NULL, 0, MPI_INT, 0, TAGEND, MPI_COMM_WORLD, &status);
			end = 1;
			break;
		}
	}

	free(finger_table_chord_ids);
	free(finger_table_mpi_ids);
}




///////////////////////////////////////////////////////////////////////////////////////////
//								HELPER FUNCTIONS
///////////////////////////////////////////////////////////////////////////////////////////


////////////////	DISPLAY

static void int_print_table(int *table, int length) {
	int i;
	for(i = 0; i < length; i++)
		printf("%d ", table[i]);
	printf("\n");
}


static void print_initial_data(int *chord_ids, int finger_tables[NB_SITES][2][M]) {
	int i;
	for(i = 0; i < NB_SITES; i++) {
		printf("[CHORD] peer:%d\t| finger_table: ", chord_ids[i]); // id_mpi i+
		int_print_table(finger_tables[i][0], M);
		// int_print_table(finger_tables[i][1], M); // rang MPI
		// printf("\n");
	}
	printf("\n");
}


////////////////	SORT

void swap(int *intArray, int num1, int num2) {
	int temp = intArray[num1];
	intArray[num1] = intArray[num2];
	intArray[num2] = temp;
}

int partition(int *intArray, int left, int right, int pivot) {
	int leftPointer = left -1;
	int rightPointer = right;

	while(1) {
		while(intArray[++leftPointer] < pivot) {}
		
		while(rightPointer > 0 && intArray[--rightPointer] > pivot) {}

		if(leftPointer >= rightPointer)
			break;
		else
			swap(intArray, leftPointer,rightPointer);
	}
	
	swap(intArray, leftPointer, right);
	return leftPointer;
}

void quickSort(int *intArray, int left, int right) {
	if(right-left <= 0) {
		return;	
	} else {
		int pivot = intArray[right];
		int partitionPoint = partition(intArray, left, right, pivot);
		quickSort(intArray, left,partitionPoint-1);
		quickSort(intArray, partitionPoint+1,right);
	}
}

